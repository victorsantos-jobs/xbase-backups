#!/usr/bin/env python3
"""
Teste R√°pido do Agente Minerador
Verifica se todos os componentes est√£o funcionando
"""

import sys
import os

# Adiciona o diret√≥rio atual ao path para imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def testar_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    print("üîç Testando imports...")
    
    try:
        from config.settings import Config
        print("  ‚úÖ config.settings.Config")
        
        from utils.logger import logger
        print("  ‚úÖ utils.logger.logger")
        
        from utils.file_handler import FileHandler
        print("  ‚úÖ utils.file_handler.FileHandler")
        
        from agente_agno import AgenteAGNO
        print("  ‚úÖ agente_agno.AgenteAGNO")
        
        from minerador import Minerador
        print("  ‚úÖ minerador.Minerador")
        
        from scheduler import AgendadorMinerador
        print("  ‚úÖ scheduler.AgendadorMinerador")
        
        print("‚úÖ Todos os imports funcionando!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def testar_configuracoes():
    """Testa se as configura√ß√µes est√£o carregando"""
    print("\n‚öôÔ∏è  Testando configura√ß√µes...")
    
    try:
        from config.settings import Config
        
        print(f"  Intervalo: {Config.AGENTE_INTERVALO}s")
        print(f"  Timeout: {Config.AGENTE_TIMEOUT}s")
        print(f"  Max Resultados: {Config.BUSCA_MAX_RESULTADOS}")
        print(f"  Storage Path: {Config.STORAGE_PATH}")
        print(f"  Estados: {len(Config.ESTADOS_BRASIL)}")
        print(f"  Portes: {len(Config.PORTES_EMPRESA)}")
        print(f"  Nichos: {len(Config.NICHOS_COMUNS)}")
        
        print("‚úÖ Configura√ß√µes carregadas com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nas configura√ß√µes: {e}")
        return False

def testar_logger():
    """Testa se o sistema de logging est√° funcionando"""
    print("\nüìù Testando logger...")
    
    try:
        from utils.logger import logger
        
        logger.info("Teste de log INFO")
        logger.warning("Teste de log WARNING")
        logger.error("Teste de log ERROR")
        
        print("‚úÖ Logger funcionando!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no logger: {e}")
        return False

def testar_file_handler():
    """Testa se o file handler est√° funcionando"""
    print("\nüìÅ Testando file handler...")
    
    try:
        from utils.file_handler import FileHandler
        
        file_handler = FileHandler()
        storage_info = file_handler.get_storage_info()
        
        print(f"  Storage Path: {storage_info['storage_path']}")
        print(f"  Total Files: {storage_info['total_files']}")
        print(f"  Total Size: {storage_info['total_size_mb']}MB")
        
        print("‚úÖ File handler funcionando!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no file handler: {e}")
        return False

def testar_estrutura_diretorios():
    """Testa se a estrutura de diret√≥rios est√° correta"""
    print("\nüìÇ Testando estrutura de diret√≥rios...")
    
    diretorios_necessarios = [
        'config',
        'utils', 
        'storage',
        'logs'
    ]
    
    arquivos_necessarios = [
        'main.py',
        'agente_agno.py',
        'minerador.py',
        'scheduler.py',
        'requirements.txt',
        'README.md'
    ]
    
    # Verifica diret√≥rios
    for dir_name in diretorios_necessarios:
        if os.path.isdir(dir_name):
            print(f"  ‚úÖ Diret√≥rio: {dir_name}/")
        else:
            print(f"  ‚ùå Diret√≥rio faltando: {dir_name}/")
            return False
    
    # Verifica arquivos
    for file_name in arquivos_necessarios:
        if os.path.isfile(file_name):
            print(f"  ‚úÖ Arquivo: {file_name}")
        else:
            print(f"  ‚ùå Arquivo faltando: {file_name}")
            return False
    
    print("‚úÖ Estrutura de diret√≥rios correta!")
    return True

def testar_ambiente_python():
    """Testa se o ambiente Python est√° configurado"""
    print("\nüêç Testando ambiente Python...")
    
    try:
        import selenium
        print(f"  ‚úÖ Selenium: {selenium.__version__}")
        
        import pandas
        print(f"  ‚úÖ Pandas: {pandas.__version__}")
        
        import requests
        print(f"  ‚úÖ Requests: {requests.__version__}")
        
        import schedule
        print(f"  ‚úÖ Schedule: {schedule.__version__}")
        
        print("‚úÖ Depend√™ncias Python instaladas!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("üí° Execute: pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def main():
    """Fun√ß√£o principal do teste"""
    print("üöÄ TESTE R√ÅPIDO DO AGENTE MINERADOR")
    print("=" * 50)
    
    testes = [
        testar_imports,
        testar_configuracoes,
        testar_logger,
        testar_file_handler,
        testar_estrutura_diretorios,
        testar_ambiente_python
    ]
    
    resultados = []
    
    for teste in testes:
        try:
            resultado = teste()
            resultados.append(resultado)
        except Exception as e:
            print(f"‚ùå Erro no teste: {e}")
            resultados.append(False)
    
    # Resumo final
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("=" * 50)
    
    total_testes = len(resultados)
    testes_aprovados = sum(resultados)
    
    print(f"Total de testes: {total_testes}")
    print(f"Testes aprovados: {testes_aprovados}")
    print(f"Testes reprovados: {total_testes - testes_aprovados}")
    
    if todos_aprovados := (testes_aprovados == total_testes):
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ O sistema est√° pronto para uso!")
        print("\nüí° Para executar:")
        print("   python main.py --modo teste")
        print("   python main.py --modo agendado")
    else:
        print("\n‚ö†Ô∏è  ALGUNS TESTES FALHARAM!")
        print("‚ùå Verifique os erros acima antes de usar o sistema")
    
    return todos_aprovados

if __name__ == "__main__":
    try:
        sucesso = main()
        sys.exit(0 if sucesso else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Teste interrompido pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro fatal no teste: {e}")
        sys.exit(1)
